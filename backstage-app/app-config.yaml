app:
  title: Backstage
  baseUrl: http://localhost:80

organization:
  name: 

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: https://backstage.ru
  listen:
    port: 7007
    # Uncomment the following host directive to bind to all IPv4 interfaces and
    # not just the baseUrl hostname.
    # host: 0.0.0.0
  csp:
    #upgrade-insecure-false: false
    connect-src: ["'self'", 'http:', 'https:']
    #img-src: ["'self'", 'data:', 'https://jira.ru/']
    #connect-src: ['http:']
    #script-src: ['http:']
    #default-src: ['http:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:80
    methods: [GET, POST, PUT, DELETE]
    credentials: true
  # This is for local developement only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
#    client: better-sqlite3
#    connection: ':memory:'
#  cache:
#    store: memory
     client: pg
     connection:
       host: ${POSTGRES_HOST}
       port: ${POSTGRES_PORT}
       user: ${POSTGRES_USER}
       password: ${POSTGRES_PASSWORD}
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
#  github:
#    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
#      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}
  gitlab:
    - apiBaseUrl: 'https://gitlab.ru/api/v4'
      baseUrl: 'https://gitlab.ru'
      host: 'gitlab.ru'
      token: ${GITLAB_TOKEN}


proxy:
  '/gitlabci':
    target: 'https://gitlab.ru/api/v4'
    allowedMethods: ['GET']
    headers:
      PRIVATE-TOKEN: '${GITLAB_TOKEN}'
  
  #'/sonarqube':
  #    target: https://sonar.ru/api
  #    allowedMethods: ['GET']
  #    auth: "${SONARQUBE_TOKEN}:"

  '/argocd/api':
  # url to the api of your hosted argoCD instance
    target: https://argocd.ru/api/v1/
    changeOrigin: true
  # this line is required if your hosted argoCD instance has self-signed certificate
    secure: false
    headers:
      Cookie:
        $env: ARGOCD_AUTH_TOKEN
  
#  '/jira/api':
#      target: 'https://jira.ru/'
#      headers:
#        Authorization:
#          $env: JIRA_TOKEN
#        Accept: 'application/json'
#        Content-Type: 'application/json'
#        X-Atlassian-Token: 'nocheck'
#        User-Agent: "MY-UA-STRING"


argocd:
  baseUrl: https://argocd.ru/

#harbor:
#  baseUrl: https://registry.ru/
#  username: 
#    $env: HARBOR_USERNAME
#  password:
#    $env: HARBOR_PASSWORD

#sonarQube:
#  baseUrl: https://sonar.ru/

#vault:
#  baseUrl: https://vault.ru/
#  token: <VAULT_TOKEN>


# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  environment: development
  providers:
    oidc:
      development:
        metadataUrl: "https://isso.****.ru/auth/realms"
        clientId: ${AUTH_OIDC_CLIENT_ID}
        clientSecret: ${AUTH_OIDC_CLIENT_SECRET}
        authorizationUrl: https://isso.****.ru/auth/realmsprotocol/openid-connect/auth
        tokenUrl: https://isso.****.ru/auth/realms/protocol/openid-connect/token
        scope: 'openid profile email'
        prompt: 'auto'

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

#harbor:
  #baseUrl: https://registry.ru
  #username: 
  #  $env: ${HARBOR_USERNAME}
  #password:
  #  $env: ${HARBOR_PASSWORD}

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
#  rules:
#    - allow: [Component, System, API, Resource, Location]
  rules:
    - allow: [Component, System, API, Group, User, Resource, Location, Domain, Template]
  locations:
    - type: url
      target: https://github.ru/catalog/-/blob/test/example/all.yaml



#  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
#    - type: file
#      target: ../../examples/entities.yaml

    # Local example template
#    - type: file
#      target: ../../examples/template/template.yaml
#      rules:
#        - allow: [Template]

    # Local example organizational data
#    - type: file
#      target: ../../examples/org.yaml
#      rules:
#        - allow: [User, Group]

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]
